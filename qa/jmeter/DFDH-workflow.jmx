<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DFDH workflow" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="Property Display" enabled="true"/>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="DFDH server under test" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${__P(DFDH_SERVER_HOST)}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">${__P(DFDH_SERVER_SCHEME)}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">${__P(DFDH_SERVER_PATH)}</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Application workflow" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1598571413000</longProp>
        <longProp name="ThreadGroup.end_time">1598571413000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Authorization header" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${__P(SERVER_USER)}:${__P(SERVER_PASS)}&quot;.getBytes());
vars.put(&quot;auth&quot;, new String(encodedUsernamePassword));</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Charset</stringProp>
              <stringProp name="Header.value">utf-8</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Basic ${auth}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ORDS delete record" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">wsgw.test.jag.gov.bc.ca</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">https://wsgw.test.jag.gov.bc.ca/rsdfrm/ords/tsta/rsdfrmords/web/digitalForm/prohibition/${__P(PROHIB_ID)}/111</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">https://wsgw.test.jag.gov.bc.ca/rsdfrm/ords/tsta/rsdfrmords/web/</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header: Authorization" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${__P(ORDS_AUTH)}/</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments"></stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Ping GET - healthcheck" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/api/utility/ping</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-834109191">&quot;VIPS ORDS Health Status&quot;:&quot;success&quot;</stringProp>
              <stringProp name="830988326">&quot;DIGITAL FORMS ORDS Health Status&quot;:&quot;success&quot;</stringProp>
              <stringProp name="-1956567479">&quot;timeDt&quot;:&quot;202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Application POST - Create prohibition record" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;applicationInfo&quot;: {&#xd;
    &quot;email&quot;: &quot;steve.1.forsyth@gov.bc.ca&quot;,&#xd;
    &quot;faxNo&quot;: &quot;2501112222&quot;,&#xd;
    &quot;firstGivenNm&quot;: &quot;Stephen&quot;,&#xd;
    &quot;formData&quot;: &quot;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZvcm0+CiAgPHNlY3Rpb24taXJwLWluZm9ybWF0aW9uPgogICAgPGNvbnRyb2wtcHJvaGliaXRpb24tbnVtYmVyPjIxOTAwMTA0PC9jb250cm9sLXByb2hpYml0aW9uLW51bWJlcj4KICAgIDxjb250cm9sLWRhdGUtc2VydmVkPjIwMjAtMDgtMjY8L2NvbnRyb2wtZGF0ZS1zZXJ2ZWQ+CiAgICA8bGljZW5jZS1zZWl6ZWQvPgogICAgPGNvbnRyb2wtcHJvaGliaXRpb24tdHlwZS1sZW5ndGgvPgogIDwvc2VjdGlvbi1pcnAtaW5mb3JtYXRpb24+CiAgPHNlY3Rpb24taWRlbnRpZmljYWl0b24taW5mb3JtYXRpb24+CiAgICA8Y29udHJvbC1hcHBsaWNhbnQ+ZmFsc2U8L2NvbnRyb2wtYXBwbGljYW50PgogICAgPGNvbnRyb2wtZHJpdmVyLWVtYWlsPnN0ZXZlLjEuZm9yc3l0aEBnb3YuYmMuY2E8L2NvbnRyb2wtZHJpdmVyLWVtYWlsPgogICAgPGNvbnRyb2wtcGhvbmUtbnVtYmVyPjI1MDEyMzQ1Njc4PC9jb250cm9sLXBob25lLW51bWJlcj4KICAgIDxjb250cm9sLWJjZGw+MTIzNDU2NzwvY29udHJvbC1iY2RsPgogICAgPGNvbnRyb2wtZHJpdmVyLWZpcnN0LW5hbWU+SGFycnk8L2NvbnRyb2wtZHJpdmVyLWZpcnN0LW5hbWU+CiAgICA8Y29udHJvbC1kcml2ZXItbGFzdC1uYW1lPkx1bmdwYXluZTwvY29udHJvbC1kcml2ZXItbGFzdC1uYW1lPgogICAgPGNvbnRyb2wtc3RyZWV0LWFkZHJlc3M+OTEwIEdvdmVybm1lbnQgU3RyZWV0PC9jb250cm9sLXN0cmVldC1hZGRyZXNzPgogICAgPGNvbnRyb2wtZHJpdmVyLWNpdHktdG93bj5WaWN0b3JpYTwvY29udHJvbC1kcml2ZXItY2l0eS10b3duPgogICAgPGNvbnRyb2wtZHJpdmVyLXByb3ZpbmNlPmJyaXRpc2hjb2x1bWJpYTwvY29udHJvbC1kcml2ZXItcHJvdmluY2U+CiAgICA8Y29udHJvbC1kcml2ZXItcG9zdGFsLWNvZGU+VjFWIDJWMjwvY29udHJvbC1kcml2ZXItcG9zdGFsLWNvZGU+CiAgICA8Y29udHJvbC11c2Utc2Vjb25kYXJ5LWFkZHJlc3M+ZmFsc2U8L2NvbnRyb2wtdXNlLXNlY29uZGFyeS1hZGRyZXNzPgogICAgPGNvbnRyb2wtc2Vjb25kYXJ5LW5hbWUvPgogICAgPGNvbnRyb2wtc2Vjb25kYXJ5LWFkZHJlc3MvPgogICAgPGNvbnRyb2wtc2Vjb25kYXJ5LWNpdHkvPgogICAgPGNvbnRyb2wtc2Vjb25kYXJ5LXByb3ZpbmNlPmJyaXRpc2hjb2x1bWJpYTwvY29udHJvbC1zZWNvbmRhcnktcHJvdmluY2U+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktcG9zdGFsLz4KICA8L3NlY3Rpb24taWRlbnRpZmljYWl0b24taW5mb3JtYXRpb24+CiAgPHNlY3Rpb24tZ3JvdW5kcy1mb3ItcmV2aWV3PgogICAgPGNvbnRyb2wtZ3JvdW5kcy1mb3ItcmV2aWV3LXRleHQvPgogIDwvc2VjdGlvbi1ncm91bmRzLWZvci1yZXZpZXc+CiAgPHNlY3Rpb24tcmVxdWVzdC1mb3ItcmV2aWV3LW9yYWwtd3JpdHRlbj4KICAgIDx3cml0dGVuLXJldmlldy1pbmZvLz4KICAgIDxoZWFyaW5nLXJlcXVlc3QtdHlwZS8+CiAgICA8b3JhbC1yZXZpZXctaW5mby8+CiAgPC9zZWN0aW9uLXJlcXVlc3QtZm9yLXJldmlldy1vcmFsLXdyaXR0ZW4+CjwvZm9ybT4=&quot;,&#xd;
    &quot;manualEntryYN&quot;: &quot;N&quot;,&#xd;
    &quot;noticeSubjectCd&quot;: &quot;PERS&quot;,&#xd;
    &quot;phoneNo&quot;: &quot;2501113333&quot;,&#xd;
    &quot;presentationTypeCd&quot;: &quot;WRIT&quot;,&#xd;
    &quot;reviewRoleTypeCd&quot;: &quot;APPNT&quot;,&#xd;
    &quot;secondGivenNm&quot;: &quot;${__P(PROHIB_TYPE)}&quot;,&#xd;
    &quot;surnameNm&quot;: &quot;Lungpayne&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${__P(PROHIB_TYPE)}/${__P(PROHIB_NUMBER)}/application/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Example URI: /digitalforms/ADP/00810080/application/saf1033</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 201" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract APPLICATION_GUID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">APPLICATION_GUID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.applicationInfo.applicationId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response JSON fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1988008085">&quot;applicationId&quot;:&quot;${APPLICATION_GUID}&quot;</stringProp>
              <stringProp name="-298420457">&quot;resp&quot;:&quot;success&quot;</stringProp>
              <stringProp name="-152128748">&quot;applicationInfo&quot;:</stringProp>
              <stringProp name="1569813725">&quot;createdTime&quot;:&quot;202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Application GET - Verify every field in prohibition record" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${APPLICATION_GUID}/application/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Example URI: /digitalforms/b105c245-5cf8-6870-e054-00144ff84cea/application/saf1032</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="560376587">&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;</stringProp>
              <stringProp name="-152128748">&quot;applicationInfo&quot;:</stringProp>
              <stringProp name="-926222189">&quot;prohibitionNoticeNo&quot;:&quot;${__P(PROHIB_NUMBER)}&quot;</stringProp>
              <stringProp name="114729933">&quot;noticeTypeCd&quot;:&quot;${__P(PROHIB_TYPE)}&quot;</stringProp>
              <stringProp name="1264991774">&quot;reviewApplnTypeCd&quot;:&quot;${__P(PROHIB_TYPE)}&quot;</stringProp>
              <stringProp name="281808565">&quot;noticeSubjectCd&quot;:&quot;PERS&quot;</stringProp>
              <stringProp name="-779133783">&quot;presentationTypeCd&quot;:&quot;WRIT&quot;</stringProp>
              <stringProp name="1748948538">&quot;reviewRoleTypeCd&quot;:&quot;APPNT&quot;</stringProp>
              <stringProp name="1069845945">&quot;firstGivenNm&quot;:&quot;Stephen&quot;</stringProp>
              <stringProp name="-640609828">&quot;secondGivenNm&quot;:&quot;${__P(PROHIB_TYPE)}&quot;</stringProp>
              <stringProp name="427076215">&quot;surnameNm&quot;:&quot;Lungpayne&quot;</stringProp>
              <stringProp name="2109045473">&quot;phoneNo&quot;:&quot;2501113333&quot;</stringProp>
              <stringProp name="-1930581424">&quot;faxNo&quot;:&quot;2501112222&quot;</stringProp>
              <stringProp name="1666570844">&quot;email&quot;:&quot;steve.1.forsyth@gov.bc.ca&quot;</stringProp>
              <stringProp name="-1898688065">&quot;manualEntryYN&quot;:&quot;N&quot;</stringProp>
              <stringProp name="2092925985">&quot;formData&quot;:&quot;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZvcm0\+CiAgPHNlY3Rpb24taXJwLWluZm9ybWF0aW9uPgogICAgPGNvbnRyb2wtcHJvaGliaXRpb24tbnVtYmVyPjIxOTAwMTA0PC9jb250cm9sLXByb2hpYml0aW9uLW51bWJlcj4KICAgIDxjb250cm9sLWRhdGUtc2VydmVkPjIwMjAtMDgtMjY8L2NvbnRyb2wtZGF0ZS1zZXJ2ZWQ\+CiAgICA8bGljZW5jZS1zZWl6ZWQvPgogICAgPGNvbnRyb2wtcHJvaGliaXRpb24tdHlwZS1sZW5ndGgvPgogIDwvc2VjdGlvbi1pcnAtaW5mb3JtYXRpb24\+CiAgPHNlY3Rpb24taWRlbnRpZmljYWl0b24taW5mb3JtYXRpb24\+CiAgICA8Y29udHJvbC1hcHBsaWNhbnQ\+ZmFsc2U8L2NvbnRyb2wtYXBwbGljYW50PgogICAgPGNvbnRyb2wtZHJpdmVyLWVtYWlsPnN0ZXZlLjEuZm9yc3l0aEBnb3YuYmMuY2E8L2NvbnRyb2wtZHJpdmVyLWVtYWlsPgogICAgPGNvbnRyb2wtcGhvbmUtbnVtYmVyPjI1MDEyMzQ1Njc4PC9jb250cm9sLXBob25lLW51bWJlcj4KICAgIDxjb250cm9sLWJjZGw\+MTIzNDU2NzwvY29udHJvbC1iY2RsPgogICAgPGNvbnRyb2wtZHJpdmVyLWZpcnN0LW5hbWU\+SGFycnk8L2NvbnRyb2wtZHJpdmVyLWZpcnN0LW5hbWU\+CiAgICA8Y29udHJvbC1kcml2ZXItbGFzdC1uYW1lPkx1bmdwYXluZTwvY29udHJvbC1kcml2ZXItbGFzdC1uYW1lPgogICAgPGNvbnRyb2wtc3RyZWV0LWFkZHJlc3M\+OTEwIEdvdmVybm1lbnQgU3RyZWV0PC9jb250cm9sLXN0cmVldC1hZGRyZXNzPgogICAgPGNvbnRyb2wtZHJpdmVyLWNpdHktdG93bj5WaWN0b3JpYTwvY29udHJvbC1kcml2ZXItY2l0eS10b3duPgogICAgPGNvbnRyb2wtZHJpdmVyLXByb3ZpbmNlPmJyaXRpc2hjb2x1bWJpYTwvY29udHJvbC1kcml2ZXItcHJvdmluY2U\+CiAgICA8Y29udHJvbC1kcml2ZXItcG9zdGFsLWNvZGU\+VjFWIDJWMjwvY29udHJvbC1kcml2ZXItcG9zdGFsLWNvZGU\+CiAgICA8Y29udHJvbC11c2Utc2Vjb25kYXJ5LWFkZHJlc3M\+ZmFsc2U8L2NvbnRyb2wtdXNlLXNlY29uZGFyeS1hZGRyZXNzPgogICAgPGNvbnRyb2wtc2Vjb25kYXJ5LW5hbWUvPgogICAgPGNvbnRyb2wtc2Vjb25kYXJ5LWFkZHJlc3MvPgogICAgPGNvbnRyb2wtc2Vjb25kYXJ5LWNpdHkvPgogICAgPGNvbnRyb2wtc2Vjb25kYXJ5LXByb3ZpbmNlPmJyaXRpc2hjb2x1bWJpYTwvY29udHJvbC1zZWNvbmRhcnktcHJvdmluY2U\+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktcG9zdGFsLz4KICA8L3NlY3Rpb24taWRlbnRpZmljYWl0b24taW5mb3JtYXRpb24\+CiAgPHNlY3Rpb24tZ3JvdW5kcy1mb3ItcmV2aWV3PgogICAgPGNvbnRyb2wtZ3JvdW5kcy1mb3ItcmV2aWV3LXRleHQvPgogIDwvc2VjdGlvbi1ncm91bmRzLWZvci1yZXZpZXc\+CiAgPHNlY3Rpb24tcmVxdWVzdC1mb3ItcmV2aWV3LW9yYWwtd3JpdHRlbj4KICAgIDx3cml0dGVuLXJldmlldy1pbmZvLz4KICAgIDxoZWFyaW5nLXJlcXVlc3QtdHlwZS8\+CiAgICA8b3JhbC1yZXZpZXctaW5mby8\+CiAgPC9zZWN0aW9uLXJlcXVlc3QtZm9yLXJldmlldy1vcmFsLXdyaXR0ZW4\+CjwvZm9ybT4=&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Application PATCH - Update every field in prohibition record" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;applicationInfo&quot;: {&#xd;
    &quot;email&quot;: &quot;hello@gov.bc.ca&quot;,&#xd;
    &quot;faxNo&quot;: &quot;9998887777&quot;,&#xd;
    &quot;firstGivenNm&quot;: &quot;Harry&quot;,&#xd;
    &quot;formData&quot;: &quot;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZvcm0+CiAgPHNlY3Rpb24taXJwLWluZm9ybWF0aW9uPgogICAgPGNvbnRyb2wtcHJvaGliaXRpb24tbnVtYmVyPjIxOTAwMDY5PC9jb250cm9sLXByb2hpYml0aW9uLW51bWJlcj4KICAgIDxjb250cm9sLWRhdGUtc2VydmVkPjIwMjAtMDgtMDc8L2NvbnRyb2wtZGF0ZS1zZXJ2ZWQ+CiAgICA8bGljZW5jZS1zZWl6ZWQvPgogICAgPGNvbnRyb2wtcHJvaGliaXRpb24tdHlwZS1sZW5ndGgvPgogIDwvc2VjdGlvbi1pcnAtaW5mb3JtYXRpb24+CiAgPHNlY3Rpb24taWRlbnRpZmljYWl0b24taW5mb3JtYXRpb24+CiAgICA8Y29udHJvbC1hcHBsaWNhbnQ+ZmFsc2U8L2NvbnRyb2wtYXBwbGljYW50PgogICAgPGNvbnRyb2wtZHJpdmVyLWVtYWlsPm1yLmZAZ292LmJjLmNhPC9jb250cm9sLWRyaXZlci1lbWFpbD4KICAgIDxjb250cm9sLXBob25lLW51bWJlcj4xMjMxMjMxMjM0PC9jb250cm9sLXBob25lLW51bWJlcj4KICAgIDxjb250cm9sLWJjZGw+MTIzNDU2NzwvY29udHJvbC1iY2RsPgogICAgPGNvbnRyb2wtZHJpdmVyLWZpcnN0LW5hbWU+QWxiZXJ0PC9jb250cm9sLWRyaXZlci1maXJzdC1uYW1lPgogICAgPGNvbnRyb2wtZHJpdmVyLWxhc3QtbmFtZT5Hb29kaGFtPC9jb250cm9sLWRyaXZlci1sYXN0LW5hbWU+CiAgICA8Y29udHJvbC1zdHJlZXQtYWRkcmVzcz45MTAgR292ZXJubWVudCBTdHJlZXQ8L2NvbnRyb2wtc3RyZWV0LWFkZHJlc3M+CiAgICA8Y29udHJvbC1kcml2ZXItY2l0eS10b3duPlZpY3RvcmlhPC9jb250cm9sLWRyaXZlci1jaXR5LXRvd24+CiAgICA8Y29udHJvbC1kcml2ZXItcHJvdmluY2U+YnJpdGlzaGNvbHVtYmlhPC9jb250cm9sLWRyaXZlci1wcm92aW5jZT4KICAgIDxjb250cm9sLWRyaXZlci1wb3N0YWwtY29kZT5WMVYgMlYyPC9jb250cm9sLWRyaXZlci1wb3N0YWwtY29kZT4KICAgIDxjb250cm9sLXVzZS1zZWNvbmRhcnktYWRkcmVzcz5mYWxzZTwvY29udHJvbC11c2Utc2Vjb25kYXJ5LWFkZHJlc3M+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktbmFtZS8+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktYWRkcmVzcy8+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktY2l0eS8+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktcHJvdmluY2U+YnJpdGlzaGNvbHVtYmlhPC9jb250cm9sLXNlY29uZGFyeS1wcm92aW5jZT4KICAgIDxjb250cm9sLXNlY29uZGFyeS1wb3N0YWwvPgogIDwvc2VjdGlvbi1pZGVudGlmaWNhaXRvbi1pbmZvcm1hdGlvbj4KICA8c2VjdGlvbi1ncm91bmRzLWZvci1yZXZpZXc+CiAgICA8Y29udHJvbC1ncm91bmRzLWZvci1yZXZpZXctdGV4dC8+CiAgPC9zZWN0aW9uLWdyb3VuZHMtZm9yLXJldmlldz4KICA8c2VjdGlvbi1yZXF1ZXN0LWZvci1yZXZpZXctb3JhbC13cml0dGVuPgogICAgPHdyaXR0ZW4tcmV2aWV3LWluZm8vPgogICAgPGhlYXJpbmctcmVxdWVzdC10eXBlLz4KICAgIDxvcmFsLXJldmlldy1pbmZvLz4KICA8L3NlY3Rpb24tcmVxdWVzdC1mb3ItcmV2aWV3LW9yYWwtd3JpdHRlbj4KPC9mb3JtPgo=&quot;,&#xd;
    &quot;manualEntryYN&quot;: &quot;Y&quot;,&#xd;
    &quot;noticeSubjectCd&quot;: &quot;PERS&quot;,&#xd;
    &quot;phoneNo&quot;: &quot;6665554444&quot;,&#xd;
    &quot;presentationTypeCd&quot;: &quot;${__P(REVIEW_TYPE)}&quot;,&#xd;
    &quot;reviewRoleTypeCd&quot;: &quot;LWYR&quot;,&#xd;
    &quot;secondGivenNm&quot;: &quot;Three&quot;,&#xd;
    &quot;surnameNm&quot;: &quot;Chestpayne&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${__P(PROHIB_TYPE)}/${APPLICATION_GUID}/application/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Change every field</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response JSON fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1172507949">&quot;applicationId&quot;:&quot;${APPLICATION_GUID}</stringProp>
              <stringProp name="-326898960">&quot;updatedTime&quot;:&quot;202</stringProp>
              <stringProp name="-298420457">&quot;resp&quot;:&quot;success&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Application GET - Verify every updated field in prohibition record" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${APPLICATION_GUID}/application/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="560376587">&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;</stringProp>
              <stringProp name="-152128748">&quot;applicationInfo&quot;:</stringProp>
              <stringProp name="-926222189">&quot;prohibitionNoticeNo&quot;:&quot;${__P(PROHIB_NUMBER)}&quot;</stringProp>
              <stringProp name="114729933">&quot;noticeTypeCd&quot;:&quot;${__P(PROHIB_TYPE)}&quot;</stringProp>
              <stringProp name="1264991774">&quot;reviewApplnTypeCd&quot;:&quot;${__P(PROHIB_TYPE)}&quot;</stringProp>
              <stringProp name="281808565">&quot;noticeSubjectCd&quot;:&quot;PERS&quot;</stringProp>
              <stringProp name="2043140591">&quot;presentationTypeCd&quot;:&quot;${__P(REVIEW_TYPE)}&quot;</stringProp>
              <stringProp name="-1734321633">&quot;reviewRoleTypeCd&quot;:&quot;LWYR&quot;</stringProp>
              <stringProp name="1698083390">&quot;firstGivenNm&quot;:&quot;Harry&quot;</stringProp>
              <stringProp name="538920520">&quot;secondGivenNm&quot;:&quot;Three&quot;</stringProp>
              <stringProp name="90596562">&quot;surnameNm&quot;:&quot;Chestpayne&quot;</stringProp>
              <stringProp name="-1188305978">&quot;phoneNo&quot;:&quot;6665554444&quot;</stringProp>
              <stringProp name="-60109547">&quot;faxNo&quot;:&quot;9998887777&quot;</stringProp>
              <stringProp name="806816181">&quot;email&quot;:&quot;hello@gov.bc.ca&quot;</stringProp>
              <stringProp name="-1898687724">&quot;manualEntryYN&quot;:&quot;Y&quot;</stringProp>
              <stringProp name="-1061418494">&quot;formData&quot;:&quot;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGZvcm0\+CiAgPHNlY3Rpb24taXJwLWluZm9ybWF0aW9uPgogICAgPGNvbnRyb2wtcHJvaGliaXRpb24tbnVtYmVyPjIxOTAwMDY5PC9jb250cm9sLXByb2hpYml0aW9uLW51bWJlcj4KICAgIDxjb250cm9sLWRhdGUtc2VydmVkPjIwMjAtMDgtMDc8L2NvbnRyb2wtZGF0ZS1zZXJ2ZWQ\+CiAgICA8bGljZW5jZS1zZWl6ZWQvPgogICAgPGNvbnRyb2wtcHJvaGliaXRpb24tdHlwZS1sZW5ndGgvPgogIDwvc2VjdGlvbi1pcnAtaW5mb3JtYXRpb24\+CiAgPHNlY3Rpb24taWRlbnRpZmljYWl0b24taW5mb3JtYXRpb24\+CiAgICA8Y29udHJvbC1hcHBsaWNhbnQ\+ZmFsc2U8L2NvbnRyb2wtYXBwbGljYW50PgogICAgPGNvbnRyb2wtZHJpdmVyLWVtYWlsPm1yLmZAZ292LmJjLmNhPC9jb250cm9sLWRyaXZlci1lbWFpbD4KICAgIDxjb250cm9sLXBob25lLW51bWJlcj4xMjMxMjMxMjM0PC9jb250cm9sLXBob25lLW51bWJlcj4KICAgIDxjb250cm9sLWJjZGw\+MTIzNDU2NzwvY29udHJvbC1iY2RsPgogICAgPGNvbnRyb2wtZHJpdmVyLWZpcnN0LW5hbWU\+QWxiZXJ0PC9jb250cm9sLWRyaXZlci1maXJzdC1uYW1lPgogICAgPGNvbnRyb2wtZHJpdmVyLWxhc3QtbmFtZT5Hb29kaGFtPC9jb250cm9sLWRyaXZlci1sYXN0LW5hbWU\+CiAgICA8Y29udHJvbC1zdHJlZXQtYWRkcmVzcz45MTAgR292ZXJubWVudCBTdHJlZXQ8L2NvbnRyb2wtc3RyZWV0LWFkZHJlc3M\+CiAgICA8Y29udHJvbC1kcml2ZXItY2l0eS10b3duPlZpY3RvcmlhPC9jb250cm9sLWRyaXZlci1jaXR5LXRvd24\+CiAgICA8Y29udHJvbC1kcml2ZXItcHJvdmluY2U\+YnJpdGlzaGNvbHVtYmlhPC9jb250cm9sLWRyaXZlci1wcm92aW5jZT4KICAgIDxjb250cm9sLWRyaXZlci1wb3N0YWwtY29kZT5WMVYgMlYyPC9jb250cm9sLWRyaXZlci1wb3N0YWwtY29kZT4KICAgIDxjb250cm9sLXVzZS1zZWNvbmRhcnktYWRkcmVzcz5mYWxzZTwvY29udHJvbC11c2Utc2Vjb25kYXJ5LWFkZHJlc3M\+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktbmFtZS8\+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktYWRkcmVzcy8\+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktY2l0eS8\+CiAgICA8Y29udHJvbC1zZWNvbmRhcnktcHJvdmluY2U\+YnJpdGlzaGNvbHVtYmlhPC9jb250cm9sLXNlY29uZGFyeS1wcm92aW5jZT4KICAgIDxjb250cm9sLXNlY29uZGFyeS1wb3N0YWwvPgogIDwvc2VjdGlvbi1pZGVudGlmaWNhaXRvbi1pbmZvcm1hdGlvbj4KICA8c2VjdGlvbi1ncm91bmRzLWZvci1yZXZpZXc\+CiAgICA8Y29udHJvbC1ncm91bmRzLWZvci1yZXZpZXctdGV4dC8\+CiAgPC9zZWN0aW9uLWdyb3VuZHMtZm9yLXJldmlldz4KICA8c2VjdGlvbi1yZXF1ZXN0LWZvci1yZXZpZXctb3JhbC13cml0dGVuPgogICAgPHdyaXR0ZW4tcmV2aWV3LWluZm8vPgogICAgPGhlYXJpbmctcmVxdWVzdC10eXBlLz4KICAgIDxvcmFsLXJldmlldy1pbmZvLz4KICA8L3NlY3Rpb24tcmVxdWVzdC1mb3ItcmV2aWV3LW9yYWwtd3JpdHRlbj4KPC9mb3JtPgo=&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Query GET - retrieve document id" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${__P(PROHIB_NUMBER)}/status/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response contains documentIds" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1345052270">{&quot;resp&quot;:&quot;success&quot;</stringProp>
              <stringProp name="1640203303">&quot;disclosure&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JExtract DOCUMENT_ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">DOCUMENT_ID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.status.disclosure[0].documentId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Disclosure GET - retrieve PDF document" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${DOCUMENT_ID}/disclosure/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-108561143">{&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;:{&quot;document&quot;:{&quot;mimeType&quot;:&quot;application/pdf&quot;,&quot;document&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Disclosure PATCH - set disclosure document sent returns 200" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;disclosure&quot;: {&#xd;
    &quot;disclosedDtm&quot;: &quot;2020-10-07 07:07:07 -07:00&quot;,&#xd;
    &quot;documentId&quot;: &quot;${DOCUMENT_ID}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/disclosure/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header: Content-Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-924402459">{&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;:true}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment GET - Verify payment status before payment" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${__P(PROHIB_NUMBER)}/payment/status/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1901873654">{&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;:</stringProp>
              <stringProp name="1742974212">&quot;transactionInfo&quot;:{}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment PATCH - make payment" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;transactionInfo&quot;:{&quot;paymentAmount&quot;:&quot;100.00&quot;,&quot;paymentCardType&quot;:&quot;VISA&quot;,&quot;paymentDate&quot;:&quot;2020-09-07 07:07:07 -07:00&quot;,&quot;receiptNumberTxt&quot;:&quot;777777&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${__P(PROHIB_NUMBER)}/payment/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response includes success message" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-924402459">{&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;:true}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment GET - verify payment information recorded" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${__P(PROHIB_NUMBER)}/payment/status/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response includes receipt number and payment information" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-298420457">&quot;resp&quot;:&quot;success&quot;</stringProp>
              <stringProp name="-1631869632">{&quot;transactionInfo&quot;:{&quot;paymentCardType&quot;:&quot;VISA&quot;,&quot;paymentAmount&quot;:&quot;100.00&quot;,&quot;receiptNumberTxt&quot;:&quot;777777&quot;,&quot;paymentDate&quot;:&quot;2020-09-07 07:07:07 -07:00&quot;}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review scheduling GET schedule - ISO-8601 date" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${__P(PROHIB_TYPE)}/${__P(REVIEW_TYPE)}/${__P(REVIEW_DATE)} 00:00:00 -07:00/review/availableTimeSlot/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response body JSON" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-781071605">{&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;:{&quot;timeSlots&quot;</stringProp>
              <stringProp name="-246808844">&quot;reviewEndDtm&quot;:</stringProp>
              <stringProp name="-469483187">&quot;reviewStartDtm&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract REVIEW_START_TIME" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">REVIEW_START_TIME</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.timeSlots.[0].reviewStartDtm</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract REVIEW_END_TIME" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">REVIEW_END_TIME</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.timeSlots.[0].reviewEndDtm</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review scheduling GET schedule - ISO short date YYYY-MM-DD" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${__P(PROHIB_TYPE)}/${__P(REVIEW_TYPE)}/${__P(REVIEW_DATE)}/review/availableTimeSlot/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response body JSON" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-781071605">{&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;:{&quot;timeSlots&quot;</stringProp>
              <stringProp name="-246808844">&quot;reviewEndDtm&quot;:</stringProp>
              <stringProp name="-1669076875">&quot;reviewStartDtm&quot;:&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract REVIEW_START_TIME" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">REVIEW_START_TIME2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.timeSlots.[1].reviewStartDtm</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract REVIEW_END_TIME" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">REVIEW_END_TIME2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.timeSlots.[1].reviewEndDtm</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Review scheduling POST - schedule a review, first request" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;timeSlot&quot;: {&#xd;
    &quot;reviewStartDtm&quot;:&quot;${REVIEW_START_TIME}&quot;,&#xd;
    &quot;reviewEndDtm&quot;:&quot;${REVIEW_END_TIME}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(SERVER_PATH)}/${__P(PROHIB_NUMBER)}/review/schedule/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">You seem to have to use a different date and time for every call to this endpoint.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response JSON fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-298420457">&quot;resp&quot;:&quot;success&quot;</stringProp>
              <stringProp name="-246808844">&quot;reviewEndDtm&quot;:</stringProp>
              <stringProp name="1431696333">&quot;reviewId&quot;:</stringProp>
              <stringProp name="-469483187">&quot;reviewStartDtm&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ADP" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ADP variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="PROHIB_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">PROHIB_NUMBER</stringProp>
              <stringProp name="Argument.value">00810080</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_IS_ADP" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_ADP</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_IS_IRP" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_IRP</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_IS_UL" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_UL</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LICENCE_SEIZED" elementType="Argument">
              <stringProp name="Argument.name">LICENCE_SEIZED</stringProp>
              <stringProp name="Argument.value">licence-seized</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IRP_PROHIBITION_TYPE_LENGTH" elementType="Argument">
              <stringProp name="Argument.name">IRP_PROHIBITION_TYPE_LENGTH</stringProp>
              <stringProp name="Argument.value">&lt;irp-prohibition-type-length/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only populated in IRP forms</stringProp>
            </elementProp>
            <elementProp name="DATE_OF_SERVICE" elementType="Argument">
              <stringProp name="Argument.name">DATE_OF_SERVICE</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">YYYY-MM-DD or use: ${__time(yyyy-MM-dd,)}</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_ROLE" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_ROLE</stringProp>
              <stringProp name="Argument.value">driver</stringProp>
              <stringProp name="Argument.desc">driver, lawyer, advocate</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FIRST_NAME_APPLICANT" elementType="Argument">
              <stringProp name="Argument.name">FIRST_NAME_APPLICANT</stringProp>
              <stringProp name="Argument.value">Harry</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LAST_NAME_APPLICANT" elementType="Argument">
              <stringProp name="Argument.name">LAST_NAME_APPLICANT</stringProp>
              <stringProp name="Argument.value">Hakuma</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UPLOAD_FILENAME" elementType="Argument">
              <stringProp name="Argument.name">UPLOAD_FILENAME</stringProp>
              <stringProp name="Argument.value">1x1pixel.png</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_PHONE_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_PHONE_NUMBER</stringProp>
              <stringProp name="Argument.value">2501110000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_EMAIL_ADDRESS" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_EMAIL_ADDRESS</stringProp>
              <stringProp name="Argument.value">steve.1.forsyth@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_EMAIL_ADDRESS_CONFIRM" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_EMAIL_ADDRESS_CONFIRM</stringProp>
              <stringProp name="Argument.value">steve.1.forsyth@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPEALS_REGISTRY_EMAIL" elementType="Argument">
              <stringProp name="Argument.name">APPEALS_REGISTRY_EMAIL</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DRIVER_FIRST_NAME" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_FIRST_NAME</stringProp>
              <stringProp name="Argument.value">Barry</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only used when APPLICANT_ROLE is lawyer or advocate</stringProp>
            </elementProp>
            <elementProp name="DRIVER_LAST_NAME" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_LAST_NAME</stringProp>
              <stringProp name="Argument.value">HAKUMA-Lungpayne</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only used when APPLICANT_ROLE is lawyer or advocate</stringProp>
            </elementProp>
            <elementProp name="DRIVER_BCDL" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_BCDL</stringProp>
              <stringProp name="Argument.value">5900001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="STREET_ADDRESS" elementType="Argument">
              <stringProp name="Argument.name">STREET_ADDRESS</stringProp>
              <stringProp name="Argument.value">910 Government Street</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_CITY_TOWN" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_CITY_TOWN</stringProp>
              <stringProp name="Argument.value">Victoria</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_PROVINCE" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_PROVINCE</stringProp>
              <stringProp name="Argument.value">britishcolumbia</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">britishcolumbia, alberta,manitoba,new-brunswick1, northwestterritories, novascotia, nunavut, ontario, prince-edward-island, quebec, saskatchewan, yukon</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_POSTAL_CODE" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_POSTAL_CODE</stringProp>
              <stringProp name="Argument.value">V8V 8V8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_TEST" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_TEST</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-test&gt;1 2 3&lt;/adp-grounds-test&gt;</stringProp>
              <stringProp name="Argument.desc">, &lt;adp-grounds-test&gt;1 2 3&lt;/adp-grounds-test&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_ALCOHOL" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_ALCOHOL</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-alcohol&gt;1 2 3&lt;/adp-grounds-alcohol&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-alcohol/&gt;, &lt;adp-grounds-alcohol&gt;1 2 3&lt;/adp-grounds-alcohol&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_DRUGS" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_DRUGS</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-drugs&gt;1 2 3&lt;/adp-grounds-drugs&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-drugs/&gt;, &lt;adp-grounds-drugs&gt;2 3 1&lt;/adp-grounds-drugs&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_ALCOHOL_DRUGS" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_ALCOHOL_DRUGS</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-alcohol-drugs&gt;3 2 1&lt;/adp-grounds-alcohol-drugs&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-alcohol-drugs/&gt;, &lt;adp-grounds-alcohol-drugs&gt;3 2 1&lt;/adp-grounds-alcohol-drugs&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_DRUG_EXPERT" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_DRUG_EXPERT</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-drug-expert&gt;1 2 3 4 5 6&lt;/adp-grounds-drug-expert&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-drug-expert/&gt;, &lt;adp-grounds-drug-expert&gt;3 6 4 2 1&lt;/adp-grounds-drug-expert&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_REFUSAL" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_REFUSAL</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-refusal&gt;1 2 3&lt;/adp-grounds-refusal&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-refusal/&gt;, &lt;adp-grounds-refusal&gt;2 3 1&lt;/adp-grounds-refusal&gt;</stringProp>
            </elementProp>
            <elementProp name="HEARING_REQUEST_TYPE" elementType="Argument">
              <stringProp name="Argument.name">HEARING_REQUEST_TYPE</stringProp>
              <stringProp name="Argument.value">oral</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">written, oral</stringProp>
            </elementProp>
            <elementProp name="IRP_GROUNDS_LIST" elementType="Argument">
              <stringProp name="Argument.name">IRP_GROUNDS_LIST</stringProp>
              <stringProp name="Argument.value">&lt;irp-grounds-list/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;irp-grounds-list/&gt;, &lt;irp-grounds-list&gt;1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/irp-grounds-list&gt;</stringProp>
            </elementProp>
            <elementProp name="UL_GROUNDS" elementType="Argument">
              <stringProp name="Argument.name">UL_GROUNDS</stringProp>
              <stringProp name="Argument.value">&lt;ul-grounds/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;ul-grounds/&gt;, &lt;ul-grounds&gt;1 2 3&lt;/ul-grounds&gt;</stringProp>
            </elementProp>
            <elementProp name="SIGNATURE_APPLICANT_NAME" elementType="Argument">
              <stringProp name="Argument.name">SIGNATURE_APPLICANT_NAME</stringProp>
              <stringProp name="Argument.value">Harry H. Lungpayne</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Full name</stringProp>
            </elementProp>
            <elementProp name="DATE_SIGNED" elementType="Argument">
              <stringProp name="Argument.name">DATE_SIGNED</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">YYYY-MM-DD or use: ${__time(yyyy-MM-dd,)}</stringProp>
            </elementProp>
            <elementProp name="SIX_DAYS_AGO" elementType="Argument">
              <stringProp name="Argument.name">SIX_DAYS_AGO</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P-5D,, ${DATE_SIGNED})}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Includes current date</stringProp>
            </elementProp>
            <elementProp name="SEVEN_DAYS_AGO" elementType="Argument">
              <stringProp name="Argument.name">SEVEN_DAYS_AGO</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P-6D,, ${DATE_SIGNED})}</stringProp>
              <stringProp name="Argument.desc">Includes current date</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="EIGHT_DAYS_AGO" elementType="Argument">
              <stringProp name="Argument.name">EIGHT_DAYS_AGO</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P-7D,, ${DATE_SIGNED})}</stringProp>
              <stringProp name="Argument.desc">Includes current date</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="NINE_DAYS_AGO" elementType="Argument">
              <stringProp name="Argument.name">NINE_DAYS_AGO</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P-8D,, ${DATE_SIGNED})}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICATION_TYPE" elementType="Argument">
              <stringProp name="Argument.name">APPLICATION_TYPE</stringProp>
              <stringProp name="Argument.value">ADF</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PAYMENT_AMOUNT" elementType="Argument">
              <stringProp name="Argument.name">PAYMENT_AMOUNT</stringProp>
              <stringProp name="Argument.value">200</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ORDS delete record" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">wsgw.test.jag.gov.bc.ca</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/rsdfrm/ords/tsta/rsdfrmords/web/digitalForm/prohibition/${__P(PROHIB_ID)}/111</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">https://wsgw.test.jag.gov.bc.ca/rsdfrm/ords/tsta/rsdfrmords/web/</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header: Authorization" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${__P(ORDS_AUTH)}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments"></stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ADP variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CONTROL_IS_ADP" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_ADP</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_IS_IRP" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_IRP</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_IS_UL" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_UL</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LICENCE_SEIZED" elementType="Argument">
              <stringProp name="Argument.name">LICENCE_SEIZED</stringProp>
              <stringProp name="Argument.value">licence-seized</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IRP_PROHIBITION_TYPE_LENGTH" elementType="Argument">
              <stringProp name="Argument.name">IRP_PROHIBITION_TYPE_LENGTH</stringProp>
              <stringProp name="Argument.value">&lt;irp-prohibition-type-length/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only populated in IRP forms</stringProp>
            </elementProp>
            <elementProp name="DATE_OF_SERVICE" elementType="Argument">
              <stringProp name="Argument.name">DATE_OF_SERVICE</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">YYYY-MM-DD or use: ${__time(yyyy-MM-dd,)}</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_ROLE" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_ROLE</stringProp>
              <stringProp name="Argument.value">driver</stringProp>
              <stringProp name="Argument.desc">driver, lawyer, advocate</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FIRST_NAME_APPLICANT" elementType="Argument">
              <stringProp name="Argument.name">FIRST_NAME_APPLICANT</stringProp>
              <stringProp name="Argument.value">Harry</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LAST_NAME_APPLICANT" elementType="Argument">
              <stringProp name="Argument.name">LAST_NAME_APPLICANT</stringProp>
              <stringProp name="Argument.value">Lungpayne</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UPLOAD_FILENAME" elementType="Argument">
              <stringProp name="Argument.name">UPLOAD_FILENAME</stringProp>
              <stringProp name="Argument.value">1x1pixel.png</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_PHONE_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_PHONE_NUMBER</stringProp>
              <stringProp name="Argument.value">2501110000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_EMAIL_ADDRESS" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_EMAIL_ADDRESS</stringProp>
              <stringProp name="Argument.value">steve.1.forsyth@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_EMAIL_ADDRESS_CONFIRM" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_EMAIL_ADDRESS_CONFIRM</stringProp>
              <stringProp name="Argument.value">steve.1.forsyth@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPEALS_REGISTRY_EMAIL" elementType="Argument">
              <stringProp name="Argument.name">APPEALS_REGISTRY_EMAIL</stringProp>
              <stringProp name="Argument.value">AR.ReviewTest@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DRIVER_FIRST_NAME" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_FIRST_NAME</stringProp>
              <stringProp name="Argument.value">Barry</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only used when APPLICANT_ROLE is lawyer or advocate</stringProp>
            </elementProp>
            <elementProp name="DRIVER_LAST_NAME" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_LAST_NAME</stringProp>
              <stringProp name="Argument.value">HAKUMA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only used when APPLICANT_ROLE is lawyer or advocate</stringProp>
            </elementProp>
            <elementProp name="DRIVER_BCDL" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_BCDL</stringProp>
              <stringProp name="Argument.value">5900001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="STREET_ADDRESS" elementType="Argument">
              <stringProp name="Argument.name">STREET_ADDRESS</stringProp>
              <stringProp name="Argument.value">910 Government Street</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_CITY_TOWN" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_CITY_TOWN</stringProp>
              <stringProp name="Argument.value">Victoria</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_PROVINCE" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_PROVINCE</stringProp>
              <stringProp name="Argument.value">britishcolumbia</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">britishcolumbia, alberta,manitoba,new-brunswick1, northwestterritories, novascotia, nunavut, ontario, prince-edward-island, quebec, saskatchewan, yukon</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_POSTAL_CODE" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_POSTAL_CODE</stringProp>
              <stringProp name="Argument.value">V8V 8V8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_TEST" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_TEST</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-test&gt;1 2 3&lt;/adp-grounds-test&gt;</stringProp>
              <stringProp name="Argument.desc">, &lt;adp-grounds-test&gt;1 2 3&lt;/adp-grounds-test&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_ALCOHOL" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_ALCOHOL</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-alcohol&gt;1 2 3&lt;/adp-grounds-alcohol&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-alcohol/&gt;, &lt;adp-grounds-alcohol&gt;1 2 3&lt;/adp-grounds-alcohol&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_DRUGS" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_DRUGS</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-drugs&gt;1 2 3&lt;/adp-grounds-drugs&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-drugs/&gt;, &lt;adp-grounds-drugs&gt;2 3 1&lt;/adp-grounds-drugs&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_ALCOHOL_DRUGS" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_ALCOHOL_DRUGS</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-alcohol-drugs&gt;3 2 1&lt;/adp-grounds-alcohol-drugs&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-alcohol-drugs/&gt;, &lt;adp-grounds-alcohol-drugs&gt;3 2 1&lt;/adp-grounds-alcohol-drugs&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_DRUG_EXPERT" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_DRUG_EXPERT</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-drug-expert&gt;1 2 3 4 5 6&lt;/adp-grounds-drug-expert&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-drug-expert/&gt;, &lt;adp-grounds-drug-expert&gt;3 6 4 2 1&lt;/adp-grounds-drug-expert&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_REFUSAL" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_REFUSAL</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-refusal&gt;1 2 3&lt;/adp-grounds-refusal&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-refusal/&gt;, &lt;adp-grounds-refusal&gt;2 3 1&lt;/adp-grounds-refusal&gt;</stringProp>
            </elementProp>
            <elementProp name="HEARING_REQUEST_TYPE" elementType="Argument">
              <stringProp name="Argument.name">HEARING_REQUEST_TYPE</stringProp>
              <stringProp name="Argument.value">oral</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">written, oral</stringProp>
            </elementProp>
            <elementProp name="IRP_GROUNDS_LIST" elementType="Argument">
              <stringProp name="Argument.name">IRP_GROUNDS_LIST</stringProp>
              <stringProp name="Argument.value">&lt;irp-grounds-list/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;irp-grounds-list/&gt;, &lt;irp-grounds-list&gt;1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/irp-grounds-list&gt;</stringProp>
            </elementProp>
            <elementProp name="UL_GROUNDS" elementType="Argument">
              <stringProp name="Argument.name">UL_GROUNDS</stringProp>
              <stringProp name="Argument.value">&lt;ul-grounds/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;ul-grounds/&gt;, &lt;ul-grounds&gt;1 2 3&lt;/ul-grounds&gt;</stringProp>
            </elementProp>
            <elementProp name="SIGNATURE_APPLICANT_NAME" elementType="Argument">
              <stringProp name="Argument.name">SIGNATURE_APPLICANT_NAME</stringProp>
              <stringProp name="Argument.value">Harry H. Lungpayne</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Full name</stringProp>
            </elementProp>
            <elementProp name="DATE_SIGNED" elementType="Argument">
              <stringProp name="Argument.name">DATE_SIGNED</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">YYYY-MM-DD or use: ${__time(yyyy-MM-dd,)}</stringProp>
            </elementProp>
            <elementProp name="SIX_DAYS_AGO" elementType="Argument">
              <stringProp name="Argument.name">SIX_DAYS_AGO</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P-5D,, ${DATE_SIGNED})}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Includes current date</stringProp>
            </elementProp>
            <elementProp name="SEVEN_DAYS_AGO" elementType="Argument">
              <stringProp name="Argument.name">SEVEN_DAYS_AGO</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P-6D,, ${DATE_SIGNED})}</stringProp>
              <stringProp name="Argument.desc">Includes current date</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="EIGHT_DAYS_AGO" elementType="Argument">
              <stringProp name="Argument.name">EIGHT_DAYS_AGO</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P-7D,, ${DATE_SIGNED})}</stringProp>
              <stringProp name="Argument.desc">Includes current date</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="NINE_DAYS_AGO" elementType="Argument">
              <stringProp name="Argument.name">NINE_DAYS_AGO</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P-8D,, ${DATE_SIGNED})}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="IRP variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CONTROL_IS_ADP" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_ADP</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_IS_IRP" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_IRP</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_IS_UL" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_UL</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LICENCE_SEIZED" elementType="Argument">
              <stringProp name="Argument.name">LICENCE_SEIZED</stringProp>
              <stringProp name="Argument.value">licence-seized</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IRP_PROHIBITION_TYPE_LENGTH" elementType="Argument">
              <stringProp name="Argument.name">IRP_PROHIBITION_TYPE_LENGTH</stringProp>
              <stringProp name="Argument.value">&lt;irp-prohibition-type-length&gt;90-days-refusal&lt;/irp-prohibition-type-length&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">3-days-warn, 7-days-warn, 30-days-warn, 90-days-fail, 90-days-refusal</stringProp>
            </elementProp>
            <elementProp name="DATE_OF_SERVICE" elementType="Argument">
              <stringProp name="Argument.name">DATE_OF_SERVICE</stringProp>
              <stringProp name="Argument.value">2020-11-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">YYYY-MM-DD or use: ${__time(yyyy-MM-dd,)}</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_ROLE" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_ROLE</stringProp>
              <stringProp name="Argument.value">driver</stringProp>
              <stringProp name="Argument.desc">driver, lawyer, advocate</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FIRST_NAME_APPLICANT" elementType="Argument">
              <stringProp name="Argument.name">FIRST_NAME_APPLICANT</stringProp>
              <stringProp name="Argument.value">Harry</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LAST_NAME_APPLICANT" elementType="Argument">
              <stringProp name="Argument.name">LAST_NAME_APPLICANT</stringProp>
              <stringProp name="Argument.value">Lungpayne</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UPLOAD_FILENAME" elementType="Argument">
              <stringProp name="Argument.name">UPLOAD_FILENAME</stringProp>
              <stringProp name="Argument.value">1x1pixel.png</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_PHONE_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_PHONE_NUMBER</stringProp>
              <stringProp name="Argument.value">2501110000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_EMAIL_ADDRESS" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_EMAIL_ADDRESS</stringProp>
              <stringProp name="Argument.value">steve.1.forsyth@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_EMAIL_ADDRESS_CONFIRM" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_EMAIL_ADDRESS_CONFIRM</stringProp>
              <stringProp name="Argument.value">steve.1.forsyth@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPEALS_REGISTRY_EMAIL" elementType="Argument">
              <stringProp name="Argument.name">APPEALS_REGISTRY_EMAIL</stringProp>
              <stringProp name="Argument.value">AR.ReviewTest@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DRIVER_FIRST_NAME" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_FIRST_NAME</stringProp>
              <stringProp name="Argument.value">Barry</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only used when APPLICANT_ROLE is lawyer or advocate</stringProp>
            </elementProp>
            <elementProp name="DRIVER_LAST_NAME" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_LAST_NAME</stringProp>
              <stringProp name="Argument.value">HAKUMA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only used when APPLICANT_ROLE is lawyer or advocate</stringProp>
            </elementProp>
            <elementProp name="DRIVER_BCDL" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_BCDL</stringProp>
              <stringProp name="Argument.value">5900001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="STREET_ADDRESS" elementType="Argument">
              <stringProp name="Argument.name">STREET_ADDRESS</stringProp>
              <stringProp name="Argument.value">910 Government Street</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_CITY_TOWN" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_CITY_TOWN</stringProp>
              <stringProp name="Argument.value">Victoria</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_PROVINCE" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_PROVINCE</stringProp>
              <stringProp name="Argument.value">britishcolumbia</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">britishcolumbia, alberta,manitoba,new-brunswick1, northwestterritories, novascotia, nunavut, ontario, prince-edward-island, quebec, saskatchewan, yukon</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_POSTAL_CODE" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_POSTAL_CODE</stringProp>
              <stringProp name="Argument.value">V8V 8V8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_TEST" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_TEST</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-test/&gt;</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-test/&gt;, &lt;adp-grounds-test&gt;1 2 3&lt;/adp-grounds-test&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_ALCOHOL" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_ALCOHOL</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-alcohol/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-alcohol/&gt;, &lt;adp-grounds-alcohol&gt;1 2 3&lt;/adp-grounds-alcohol&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_DRUGS" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_DRUGS</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-drugs/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-drugs/&gt;, &lt;adp-grounds-drugs&gt;2 3 1&lt;/adp-grounds-drugs&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_ALCOHOL_DRUGS" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_ALCOHOL_DRUGS</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-alcohol-drugs/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-alcohol-drugs/&gt;, &lt;adp-grounds-alcohol-drugs&gt;3 2 1&lt;/adp-grounds-alcohol-drugs&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_DRUG_EXPERT" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_DRUG_EXPERT</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-drug-expert/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-drug-expert/&gt;, &lt;adp-grounds-drug-expert&gt;3 6 4 2 1&lt;/adp-grounds-drug-expert&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_REFUSAL" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_REFUSAL</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-refusal/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-refusal/&gt;, &lt;adp-grounds-refusal&gt;2 3 1&lt;/adp-grounds-refusal&gt;</stringProp>
            </elementProp>
            <elementProp name="HEARING_REQUEST_TYPE" elementType="Argument">
              <stringProp name="Argument.name">HEARING_REQUEST_TYPE</stringProp>
              <stringProp name="Argument.value">oral</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">written, oral</stringProp>
            </elementProp>
            <elementProp name="IRP_GROUNDS_LIST" elementType="Argument">
              <stringProp name="Argument.name">IRP_GROUNDS_LIST</stringProp>
              <stringProp name="Argument.value">&lt;irp-grounds-list&gt;1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/irp-grounds-list&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;irp-grounds-list/&gt;, &lt;irp-grounds-list&gt;1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/irp-grounds-list&gt;</stringProp>
            </elementProp>
            <elementProp name="UL_GROUNDS" elementType="Argument">
              <stringProp name="Argument.name">UL_GROUNDS</stringProp>
              <stringProp name="Argument.value">&lt;ul-grounds/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;ul-grounds/&gt;, &lt;ul-grounds&gt;1 2 3&lt;/ul-grounds&gt;</stringProp>
            </elementProp>
            <elementProp name="SIGNATURE_APPLICANT_NAME" elementType="Argument">
              <stringProp name="Argument.name">SIGNATURE_APPLICANT_NAME</stringProp>
              <stringProp name="Argument.value">Harry H. Lungpayne</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Full name</stringProp>
            </elementProp>
            <elementProp name="DATE_SIGNED" elementType="Argument">
              <stringProp name="Argument.name">DATE_SIGNED</stringProp>
              <stringProp name="Argument.value">2020-11-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">YYYY-MM-DD or use: ${__time(yyyy-MM-dd,)}</stringProp>
            </elementProp>
            <elementProp name="PROHIB_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">PROHIB_NUMBER</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UL variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CONTROL_IS_ADP" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_ADP</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_IS_IRP" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_IRP</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_IS_UL" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_IS_UL</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LICENCE_SEIZED" elementType="Argument">
              <stringProp name="Argument.name">LICENCE_SEIZED</stringProp>
              <stringProp name="Argument.value">licence-seized</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IRP_PROHIBITION_TYPE_LENGTH" elementType="Argument">
              <stringProp name="Argument.name">IRP_PROHIBITION_TYPE_LENGTH</stringProp>
              <stringProp name="Argument.value">&lt;irp-prohibition-type-length/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only populated in IRP forms</stringProp>
            </elementProp>
            <elementProp name="DATE_OF_SERVICE" elementType="Argument">
              <stringProp name="Argument.name">DATE_OF_SERVICE</stringProp>
              <stringProp name="Argument.value">2020-11-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">YYYY-MM-DD or use: ${__time(yyyy-MM-dd,)}</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_ROLE" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_ROLE</stringProp>
              <stringProp name="Argument.value">driver</stringProp>
              <stringProp name="Argument.desc">driver, lawyer, advocate</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FIRST_NAME_APPLICANT" elementType="Argument">
              <stringProp name="Argument.name">FIRST_NAME_APPLICANT</stringProp>
              <stringProp name="Argument.value">Harry</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LAST_NAME_APPLICANT" elementType="Argument">
              <stringProp name="Argument.name">LAST_NAME_APPLICANT</stringProp>
              <stringProp name="Argument.value">Lungpayne</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UPLOAD_FILENAME" elementType="Argument">
              <stringProp name="Argument.name">UPLOAD_FILENAME</stringProp>
              <stringProp name="Argument.value">1x1pixel.png</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_PHONE_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_PHONE_NUMBER</stringProp>
              <stringProp name="Argument.value">2501110000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_EMAIL_ADDRESS" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_EMAIL_ADDRESS</stringProp>
              <stringProp name="Argument.value">steve.1.forsyth@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPLICANT_EMAIL_ADDRESS_CONFIRM" elementType="Argument">
              <stringProp name="Argument.name">APPLICANT_EMAIL_ADDRESS_CONFIRM</stringProp>
              <stringProp name="Argument.value">steve.1.forsyth@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APPEALS_REGISTRY_EMAIL" elementType="Argument">
              <stringProp name="Argument.name">APPEALS_REGISTRY_EMAIL</stringProp>
              <stringProp name="Argument.value">AR.ReviewTest@gov.bc.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DRIVER_FIRST_NAME" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_FIRST_NAME</stringProp>
              <stringProp name="Argument.value">Barry</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only used when APPLICANT_ROLE is lawyer or advocate</stringProp>
            </elementProp>
            <elementProp name="DRIVER_LAST_NAME" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_LAST_NAME</stringProp>
              <stringProp name="Argument.value">HAKUMA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Only used when APPLICANT_ROLE is lawyer or advocate</stringProp>
            </elementProp>
            <elementProp name="DRIVER_BCDL" elementType="Argument">
              <stringProp name="Argument.name">DRIVER_BCDL</stringProp>
              <stringProp name="Argument.value">5900001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="STREET_ADDRESS" elementType="Argument">
              <stringProp name="Argument.name">STREET_ADDRESS</stringProp>
              <stringProp name="Argument.value">910 Government Street</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_CITY_TOWN" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_CITY_TOWN</stringProp>
              <stringProp name="Argument.value">Victoria</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_PROVINCE" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_PROVINCE</stringProp>
              <stringProp name="Argument.value">britishcolumbia</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">britishcolumbia, alberta,manitoba,new-brunswick1, northwestterritories, novascotia, nunavut, ontario, prince-edward-island, quebec, saskatchewan, yukon</stringProp>
            </elementProp>
            <elementProp name="CONTROL_DRIVER_POSTAL_CODE" elementType="Argument">
              <stringProp name="Argument.name">CONTROL_DRIVER_POSTAL_CODE</stringProp>
              <stringProp name="Argument.value">V8V 8V8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_TEST" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_TEST</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-test/&gt;</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-test/&gt;, &lt;adp-grounds-test&gt;1 2 3&lt;/adp-grounds-test&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_ALCOHOL" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_ALCOHOL</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-alcohol/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-alcohol/&gt;, &lt;adp-grounds-alcohol&gt;1 2 3&lt;/adp-grounds-alcohol&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_DRUGS" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_DRUGS</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-drugs/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-drugs/&gt;, &lt;adp-grounds-drugs&gt;2 3 1&lt;/adp-grounds-drugs&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_ALCOHOL_DRUGS" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_ALCOHOL_DRUGS</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-alcohol-drugs/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-alcohol-drugs/&gt;, &lt;adp-grounds-alcohol-drugs&gt;3 2 1&lt;/adp-grounds-alcohol-drugs&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_DRUG_EXPERT" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_DRUG_EXPERT</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-drug-expert/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-drug-expert/&gt;, &lt;adp-grounds-drug-expert&gt;3 6 4 2 1&lt;/adp-grounds-drug-expert&gt;</stringProp>
            </elementProp>
            <elementProp name="ADP_GROUNDS_REFUSAL" elementType="Argument">
              <stringProp name="Argument.name">ADP_GROUNDS_REFUSAL</stringProp>
              <stringProp name="Argument.value">&lt;adp-grounds-refusal/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;adp-grounds-refusal/&gt;, &lt;adp-grounds-refusal&gt;2 3 1&lt;/adp-grounds-refusal&gt;</stringProp>
            </elementProp>
            <elementProp name="HEARING_REQUEST_TYPE" elementType="Argument">
              <stringProp name="Argument.name">HEARING_REQUEST_TYPE</stringProp>
              <stringProp name="Argument.value">oral</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">written, oral</stringProp>
            </elementProp>
            <elementProp name="IRP_GROUNDS_LIST" elementType="Argument">
              <stringProp name="Argument.name">IRP_GROUNDS_LIST</stringProp>
              <stringProp name="Argument.value">&lt;irp-grounds-list/&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;irp-grounds-list/&gt;, &lt;irp-grounds-list&gt;1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/irp-grounds-list&gt;</stringProp>
            </elementProp>
            <elementProp name="UL_GROUNDS" elementType="Argument">
              <stringProp name="Argument.name">UL_GROUNDS</stringProp>
              <stringProp name="Argument.value">&lt;ul-grounds&gt;1 2 3&lt;/ul-grounds&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">&lt;ul-grounds/&gt;, &lt;ul-grounds&gt;1 2 3&lt;/ul-grounds&gt;</stringProp>
            </elementProp>
            <elementProp name="SIGNATURE_APPLICANT_NAME" elementType="Argument">
              <stringProp name="Argument.name">SIGNATURE_APPLICANT_NAME</stringProp>
              <stringProp name="Argument.value">Harry H. Lungpayne</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Full name</stringProp>
            </elementProp>
            <elementProp name="DATE_SIGNED" elementType="Argument">
              <stringProp name="Argument.name">DATE_SIGNED</stringProp>
              <stringProp name="Argument.value">2020-11-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">YYYY-MM-DD or use: ${__time(yyyy-MM-dd,)}</stringProp>
            </elementProp>
            <elementProp name="PROHIB_NUMBER" elementType="Argument">
              <stringProp name="Argument.name">PROHIB_NUMBER</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DFAPI healthcheck" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(DFAPI_SERVER_HOST)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/digitalforms/api/utility/ping</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DFAPI authorization header" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${__P(DFAPI_SERVER_USER)}:${__P(DFAPI_SERVER_PASS)}&quot;.getBytes());
vars.put(&quot;dfapi_auth&quot;, new String(encodedUsernamePassword));</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${dfapi_auth}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-834109191">&quot;VIPS ORDS Health Status&quot;:&quot;success&quot;</stringProp>
              <stringProp name="830988326">&quot;DIGITAL FORMS ORDS Health Status&quot;:&quot;success&quot;</stringProp>
              <stringProp name="-1956567479">&quot;timeDt&quot;:&quot;202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Proxy ORDS delete record" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">stevef-jik2hd-test.pathfinder.gov.bc.ca</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/delete/${__P(PROHIB_ID)}/111</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">https://stevef-jik2hd-test.pathfinder.gov.bc.ca/delete</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header: Authorization" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${__P(ORDS_AUTH)}</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments"></stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="   Mock Control: Set status response for ${__P(PROHIB_NUMBER)}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;driverLicenceSeizedYn&quot;:&quot;Y&quot;,&#xd;
	&quot;reviewFormSubmittedYn&quot;:&quot;N&quot;,&#xd;
	&quot;noticeServedDt&quot;:&quot;${__time(yyyy-MM-dd,)} 00:00:00 -08:00&quot;,&#xd;
	&quot;receiptNumberTxt&quot;:null,&#xd;
	&quot;applicationId&quot;:null,&#xd;
	&quot;reviewStartDtm&quot;:null,&#xd;
	&quot;reviewEndDtm&quot;:null,&#xd;
	&quot;data.status.lumpy&quot;:&quot;bumpy&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5010</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/test/${__P(DFAPI_SERVER_PATH)}/${__P(PROHIB_NUMBER)}/status/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="3-second Timer (allows DFAPI to create VIPS record)" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="   Mock DFAPI:    Query GET application status" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5010</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/test/${__P(DFAPI_SERVER_PATH)}/${__P(PROHIB_NUMBER)}/status/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__P(DFAPI_SERVER_PORT)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DFAPI authorization header" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${__P(DFAPI_SERVER_USER)}:${__P(DFAPI_SERVER_PASS)}&quot;.getBytes());
vars.put(&quot;dfapi_auth&quot;, new String(encodedUsernamePassword));</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${dfapi_auth}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response contains documentIds" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1345052270">{&quot;resp&quot;:&quot;success&quot;</stringProp>
              <stringProp name="1640203303">&quot;disclosure&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JExtract DOCUMENT_ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">DOCUMENT_ID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.status.disclosure[0].documentId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extractor APPLICATION_GUID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">APPLICATION_GUID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.status.applicationId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DFDH POST new application" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;form&gt;&#xd;
  &lt;before-you-begin&gt;&#xd;
    &lt;help-image filename=&quot;info_reduced.png&quot; mediatype=&quot;image/png&quot;&gt;/fr/service/persistence/crud/gov-pssg/prohibition_review/form/177ce3ac783dbc708641d34d68c4537610b2c88b.bin&lt;/help-image&gt;&#xd;
    &lt;help-text/&gt;&#xd;
  &lt;/before-you-begin&gt;&#xd;
  &lt;prohibition-information&gt;&#xd;
    &lt;control-prohibition-number&gt;${__P(PROHIB_NUMBER)}&lt;/control-prohibition-number&gt;&#xd;
    &lt;control-11/&gt;&#xd;
    &lt;control-is-adp&gt;${CONTROL_IS_ADP}&lt;/control-is-adp&gt;&#xd;
    &lt;control-is-irp&gt;${CONTROL_IS_IRP}&lt;/control-is-irp&gt;&#xd;
    &lt;control-is-ul&gt;${CONTROL_IS_UL}&lt;/control-is-ul&gt;&#xd;
    &lt;prohibition-number-clean&gt;${__P(PROHIB_NUMBER)}&lt;/prohibition-number-clean&gt;&#xd;
    &lt;prohibition-no-image filename=&quot;Combo prohibition no.png&quot; mediatype=&quot;image/png&quot;&gt;/fr/service/persistence/crud/gov-pssg/prohibition_review/form/c1f5e74f6cbaec34574386b394d0141645faff1e.bin&lt;/prohibition-no-image&gt;&#xd;
    &lt;licence-seized&gt;${LICENCE_SEIZED}&lt;/licence-seized&gt;&#xd;
    &lt;licence-not-surrendered/&gt;&#xd;
    &lt;licence-lost-or-stolen/&gt;&#xd;
    &lt;licence-not-issued/&gt;&#xd;
    ${IRP_PROHIBITION_TYPE_LENGTH}&#xd;
    &lt;date-of-service&gt;${SIX_DAYS_AGO}&lt;/date-of-service&gt;&#xd;
  &lt;/prohibition-information&gt;&#xd;
  &lt;identification-information&gt;&#xd;
    &lt;applicant-information-label/&gt;&#xd;
    &lt;applicant-role&gt;${APPLICANT_ROLE}&lt;/applicant-role&gt;&#xd;
    &lt;first-name-applicant&gt;${FIRST_NAME_APPLICANT}&lt;/first-name-applicant&gt;&#xd;
    &lt;last-name-applicant&gt;${LAST_NAME_APPLICANT}&lt;/last-name-applicant&gt;&#xd;
    &lt;consent-upload filename=&quot;${UPLOAD_FILENAME}&quot; mediatype=&quot;image/png&quot; size=&quot;95&quot;&gt;file:/tmp/xforms_upload_15517868928568885436.tmp?filename=${UPLOAD_FILENAME}&amp;amp;mediatype=image%2Fpng&amp;amp;size=95&amp;amp;mac=70a3c3a4a0cf551af30159e90dc763a27b5f761b&lt;/consent-upload&gt;&#xd;
    &lt;applicant-contact-information-label/&gt;&#xd;
    &lt;applicant-phone-number&gt;${APPLICANT_PHONE_NUMBER}&lt;/applicant-phone-number&gt;&#xd;
    &lt;applicant-email-address&gt;${APPLICANT_EMAIL_ADDRESS}&lt;/applicant-email-address&gt;&#xd;
    &lt;appeals-registry-email&gt;${APPEALS_REGISTRY_EMAIL}&lt;/appeals-registry-email&gt;&#xd;
    &lt;applicant-email-confirm&gt;${APPLICANT_EMAIL_ADDRESS_CONFIRM}&lt;/applicant-email-confirm&gt;&#xd;
    &lt;driver-inforamation-label/&gt;&#xd;
    &lt;driver-first-name&gt;${DRIVER_FIRST_NAME}&lt;/driver-first-name&gt;&#xd;
    &lt;driver-last-name&gt;${DRIVER_LAST_NAME}&lt;/driver-last-name&gt;&#xd;
    &lt;driver-bcdl&gt;${DRIVER_BCDL}&lt;/driver-bcdl&gt;&#xd;
    &lt;address-label/&gt;&#xd;
    &lt;street-address&gt;${STREET_ADDRESS}&lt;/street-address&gt;&#xd;
    &lt;control-driver-city-town&gt;${CONTROL_DRIVER_CITY_TOWN}&lt;/control-driver-city-town&gt;&#xd;
    &lt;control-driver-province&gt;${CONTROL_DRIVER_PROVINCE}&lt;/control-driver-province&gt;&#xd;
    &lt;control-driver-postal-code&gt;${CONTROL_DRIVER_POSTAL_CODE}&lt;/control-driver-postal-code&gt;&#xd;
  &lt;/identification-information&gt;&#xd;
  &lt;review-information&gt;&#xd;
    &lt;ul-burden-of-proof-text/&gt;&#xd;
    ${UL_GROUNDS}&#xd;
    &lt;irp-burden-of-proof-text/&gt;&#xd;
    ${IRP_GROUNDS_LIST}&#xd;
    &lt;adp-burden-of-proof-text/&gt;&#xd;
    ${ADP_GROUNDS_ALCOHOL}&#xd;
    ${ADP_GROUNDS_DRUGS}&#xd;
    ${ADP_GROUNDS_ALCOHOL_DRUGS}&#xd;
    ${ADP_GROUNDS_DRUG_EXPERT}&#xd;
    ${ADP_GROUNDS_REFUSAL}&#xd;
    &lt;control-6/&gt;&#xd;
    &lt;hearing-request-type&gt;${HEARING_REQUEST_TYPE}&lt;/hearing-request-type&gt;&#xd;
    &lt;control-2/&gt;&#xd;
    &lt;oral-review-instructions/&gt;&#xd;
    &lt;preparing-for-your-review/&gt;&#xd;
    &lt;preparing-for-review-irp-text/&gt;&#xd;
    &lt;preparing-for-review-ul-text/&gt;&#xd;
  &lt;/review-information&gt;&#xd;
  &lt;consent-and-submission&gt;&#xd;
    &lt;signature-applicant-name&gt;${SIGNATURE_APPLICANT_NAME}&lt;/signature-applicant-name&gt;&#xd;
    &lt;date-signed&gt;${DATE_SIGNED}&lt;/date-signed&gt;&#xd;
    &lt;control-5/&gt;&#xd;
  &lt;/consent-and-submission&gt;&#xd;
&lt;/form&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(DFDH_SERVER_HOST)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(DFDH_SERVER_PORT)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(DFDH_SERVER_SCHEME)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/publish/event/form?form=prohibition_review</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">http://127.0.0.1:5000/v1/publish/event/form?form=prohibition_review</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract form" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">APPLICATION_FORM_XML</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.prohibition_review.xml</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Returns HTTP 200 OK" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON payload indicates success" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="A" elementType="Argument">
                <stringProp name="Argument.name">A</stringProp>
                <stringProp name="Argument.value">${__base64Decode(${APPLICATION_FORM_XML},decodeVar)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">log.info(&quot;Stephen&quot;);

String myVar = vars.get(&quot;APPLICATION_FORM_XML&quot;);
log.info(&quot;VAR IS: &quot; + myVar);

//log.info(&quot;DECODED: &quot; + base64Decode(vars.get(&quot;APPLICATION_FORM_XML&quot;)).toString());

//command=&apos;echo \&apos;&apos; + vars.get(&quot;APPLICATION_FORM_XML&quot;) + &apos;\ | gunzip&apos;
cmd = 
vars.put(&apos;foo&apos;, &quot;echo &apos;&quot; + myVar + &quot;&apos; | gunzip&quot;.execute().text)
log.info(&apos;foo variable: &apos; + vars.get(&apos;foo&apos;))

prev.setResponseData(new java.util.zip.GZIPInputStream(new ByteArrayInputStream(prev.getResponseDataAsString().decodeBase64())).getBytes())</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="BeanShell Listener" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&apos;foo&apos;, &apos;echo hello&apos;.execute().text)
log.info(&apos;foo variable: &apos; + vars.get(&apos;foo&apos;))</stringProp>
          </BeanShellListener>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Poll DFAPI for new APPLICATION_GUID" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript((&quot;${APPLICATION_GUID}&quot; == &quot;&quot; &amp;&amp; ${counter} &lt; 5),)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="   Real DFAPI:     Query GET application status (harvest APPLICATION_GUID)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(DFAPI_SERVER_HOST)}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(DFAPI_SERVER_PATH)}/${__P(PROHIB_NUMBER)}/status/${__P(CORRELATION_ID)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">${__P(DFAPI_SERVER_PORT)}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DFAPI authorization header" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${__P(DFAPI_SERVER_USER)}:${__P(DFAPI_SERVER_PASS)}&quot;.getBytes());
vars.put(&quot;dfapi_auth&quot;, new String(encodedUsernamePassword));</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Charset</stringProp>
                  <stringProp name="Header.value">utf-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${dfapi_auth}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response contains documentIds" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1345052270">{&quot;resp&quot;:&quot;success&quot;</stringProp>
                <stringProp name="1640203303">&quot;disclosure&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JExtract DOCUMENT_ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">DOCUMENT_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.status.disclosure[0].documentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extractor APPLICATION_GUID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">APPLICATION_GUID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.status.applicationId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Poll Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DFAPI Application GET application record" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(DFAPI_SERVER_HOST)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(DFAPI_SERVER_SCHEME)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(DFAPI_SERVER_PATH)}/${APPLICATION_GUID}/application/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DFAPI authorization header" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${__P(DFAPI_SERVER_USER)}:${__P(DFAPI_SERVER_PASS)}&quot;.getBytes());
vars.put(&quot;auth&quot;, new String(encodedUsernamePassword));</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${dfapi_auth}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="560376587">&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;</stringProp>
              <stringProp name="-152128748">&quot;applicationInfo&quot;:</stringProp>
              <stringProp name="-926222189">&quot;prohibitionNoticeNo&quot;:&quot;${__P(PROHIB_NUMBER)}&quot;</stringProp>
              <stringProp name="114729933">&quot;noticeTypeCd&quot;:&quot;${__P(PROHIB_TYPE)}&quot;</stringProp>
              <stringProp name="1200323163">&quot;reviewApplnTypeCd&quot;:&quot;ADP&quot;</stringProp>
              <stringProp name="281808565">&quot;noticeSubjectCd&quot;:&quot;PERS&quot;</stringProp>
              <stringProp name="1466922757">&quot;presentationTypeCd&quot;:&quot;${__changeCase(${HEARING_REQUEST_TYPE},UPPER)}&quot;</stringProp>
              <stringProp name="1748948538">&quot;reviewRoleTypeCd&quot;:&quot;APPNT&quot;</stringProp>
              <stringProp name="-13370635">&quot;firstGivenNm&quot;:&quot;${FIRST_NAME_APPLICANT}&quot;</stringProp>
              <stringProp name="1299878419">&quot;surnameNm&quot;:&quot;${LAST_NAME_APPLICANT}&quot;</stringProp>
              <stringProp name="1456052976">&quot;phoneNo&quot;:&quot;${APPLICANT_PHONE_NUMBER}&quot;</stringProp>
              <stringProp name="1466866418">&quot;email&quot;:&quot;${APPLICANT_EMAIL_ADDRESS}&quot;</stringProp>
              <stringProp name="-1898688065">&quot;manualEntryYN&quot;:&quot;N&quot;</stringProp>
              <stringProp name="-1489844984">&quot;formData&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="   Mock Control: set application id ${APPLICATION_GUID}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;driverLicenceSeizedYn&quot;:&quot;Y&quot;,&#xd;
	&quot;reviewFormSubmittedYn&quot;:&quot;Y&quot;,&#xd;
	&quot;noticeServedDt&quot;:&quot;${__time(yyyy-MM-dd,)} 00:00:00 -08:00&quot;,&#xd;
	&quot;receiptNumberTxt&quot;:null,&#xd;
	&quot;applicationId&quot;:&quot;${APPLICATION_GUID}&quot;,&#xd;
	&quot;reviewStartDtm&quot;:null,&#xd;
	&quot;reviewEndDtm&quot;:null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5010</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/test/${__P(DFAPI_SERVER_PATH)}/${__P(PROHIB_NUMBER)}/status/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="   Mock DFAPI:    Query GET application status" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5010</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/test/${__P(DFAPI_SERVER_PATH)}/${__P(PROHIB_NUMBER)}/status/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__P(DFAPI_SERVER_PORT)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DFAPI authorization header" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${__P(DFAPI_SERVER_USER)}:${__P(DFAPI_SERVER_PASS)}&quot;.getBytes());
vars.put(&quot;dfapi_auth&quot;, new String(encodedUsernamePassword));</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${dfapi_auth}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response contains documentIds" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1345052270">{&quot;resp&quot;:&quot;success&quot;</stringProp>
              <stringProp name="1640203303">&quot;disclosure&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JExtract DOCUMENT_ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">DOCUMENT_ID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.status.disclosure[0].documentId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extractor APPLICATION_GUID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">APPLICATION_GUID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.status.applicationId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DFDH PayBC API Authorization" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">grant_type=client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5001</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/oauth/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://localhost:5001</stringProp>
                <stringProp name="Authorization.username">V8KXikXTx312NehDsgUqlirR</stringProp>
                <stringProp name="Authorization.password">eI8pYaMInvrhTHoJ7fe4YRxdZ9ve9sWgRVoOb6V9xmquWsfi</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
                <stringProp name="Authorization.mechanism">BASIC_DIGEST</stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Authorization" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">PAYBC_API_AUTH_TOKEN</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DFDH PayBC API get invoice URL" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5001</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api_v2/search?invoice_number=${PROHIB_NUMBER}&amp;check_value=${LAST_NAME_APPLICANT}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${PAYBC_API_AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract invoice URL" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">PAYBC_API_INVOICE_URL</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">.items[0].selected_invoice.$ref</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract PayBC API receipt URL" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PAYBC_RECEIPT_URI</stringProp>
            <stringProp name="RegexExtractor.regex">:5001(.*?)&quot;}.*</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DFDH PayBC API generate invoice" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5001</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PAYBC_RECEIPT_URI}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${PAYBC_API_AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert account_number" enabled="true">
            <stringProp name="JSON_PATH">account_number</stringProp>
            <stringProp name="EXPECTED_VALUE">n/a</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert cust_trx_type" enabled="true">
            <stringProp name="JSON_PATH">cust_trx_type</stringProp>
            <stringProp name="EXPECTED_VALUE">Review Notice of Driving Prohibition</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert amount" enabled="true">
            <stringProp name="JSON_PATH">amount</stringProp>
            <stringProp name="EXPECTED_VALUE">${PAYMENT_AMOUNT}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert term_due_date" enabled="true">
            <stringProp name="JSON_PATH">term_due_date</stringProp>
            <stringProp name="EXPECTED_VALUE">${DATE_SIGNED}T00:00:00-08:00</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert party_number" enabled="true">
            <stringProp name="JSON_PATH">party_number</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert party_name" enabled="true">
            <stringProp name="JSON_PATH">party_name</stringProp>
            <stringProp name="EXPECTED_VALUE">n/a</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert pbc_ref_number" enabled="true">
            <stringProp name="JSON_PATH">pbc_ref_number</stringProp>
            <stringProp name="EXPECTED_VALUE">^[0-9]*$</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert amount_due" enabled="true">
            <stringProp name="JSON_PATH">amount_due</stringProp>
            <stringProp name="EXPECTED_VALUE">200</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert attribute1" enabled="true">
            <stringProp name="JSON_PATH">attribute1</stringProp>
            <stringProp name="EXPECTED_VALUE">Administrative driving prohibition</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert attribute3" enabled="true">
            <stringProp name="JSON_PATH">attribute3</stringProp>
            <stringProp name="EXPECTED_VALUE">${__changeCase(${HEARING_REQUEST_TYPE},UPPER)}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert attribute2" enabled="true">
            <stringProp name="JSON_PATH">attribute2</stringProp>
            <stringProp name="EXPECTED_VALUE">${__time(MMM d,)}, ${__time(yyyy,)}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert site_number" enabled="true">
            <stringProp name="JSON_PATH">site_number</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert invoice_number" enabled="true">
            <stringProp name="JSON_PATH">invoice_number</stringProp>
            <stringProp name="EXPECTED_VALUE">${__P(PROHIB_NUMBER)}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DFDH PayBC API generate receipt" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;receipt_number&quot;: &quot;TESTRECEIPT ${APPLICATION_TYPE} ${__P(PROHIB_NUMBER)}&quot;,&#xd;
    &quot;receipt_date&quot;: &quot;${__time(YYYY-MM-dd,)}T${__time(H:mm:s,)}Z&quot;,&#xd;
    &quot;receipt_amount&quot;: ${PAYMENT_AMOUNT}.00,&#xd;
    &quot;payment_method&quot;: &quot;PAYBC-RSI-CC&quot;,&#xd;
    &quot;comments&quot;: &quot;JMeter test suite (SAF)&quot;,&#xd;
    &quot;cardtype&quot;: &quot;Visa&quot;,&#xd;
    &quot;invoices&quot;: &#xd;
    [{&#xd;
        &quot;trx_number&quot;: &quot;${__P(PROHIB_NUMBER)}&quot;,&#xd;
        &quot;amount_to_apply&quot;: ${PAYMENT_AMOUNT}.00,&#xd;
	&quot;lines&quot;: &#xd;
	[{&#xd;
	    &quot;line_number&quot;: 1,&#xd;
	    &quot;amount_to_apply&quot;: ${PAYMENT_AMOUNT}.00&#xd;
	}]&#xd;
    }]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5001</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api_v2/receipt</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${PAYBC_API_AUTH_TOKEN}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert receipt_amount" enabled="true">
            <stringProp name="JSON_PATH">receipt_amount</stringProp>
            <stringProp name="EXPECTED_VALUE">${PAYMENT_AMOUNT}.0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert receipt_date" enabled="true">
            <stringProp name="JSON_PATH">receipt_date</stringProp>
            <stringProp name="EXPECTED_VALUE">${__time(yyyy-MM-dd,)}.*</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert receipt_number" enabled="true">
            <stringProp name="JSON_PATH">receipt_number</stringProp>
            <stringProp name="EXPECTED_VALUE">TESTRECEIPT ${APPLICATION_TYPE} ${__P(PROHIB_NUMBER)}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert status" enabled="true">
            <stringProp name="JSON_PATH">status</stringProp>
            <stringProp name="EXPECTED_VALUE">APP</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mock Control: Set application response for ${__P(PROHIB_NUMBER)}" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;firstGivenNm&quot;:&quot;HELLO!&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5010</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/test/${__P(DFAPI_SERVER_PATH)}/${APPLICATION_GUID}/application/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mock: DFAPI Application GET application record" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">5010</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/test/${__P(DFAPI_SERVER_PATH)}/${APPLICATION_GUID}/application/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DFAPI authorization header" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${__P(DFAPI_SERVER_USER)}:${__P(DFAPI_SERVER_PASS)}&quot;.getBytes());
vars.put(&quot;auth&quot;, new String(encodedUsernamePassword));</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${dfapi_auth}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="True DFAPI Application GET application record" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(DFAPI_SERVER_HOST)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(DFAPI_SERVER_SCHEME)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(DFAPI_SERVER_PATH)}/${APPLICATION_GUID}/application/${__P(CORRELATION_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DFAPI authorization header" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${__P(DFAPI_SERVER_USER)}:${__P(DFAPI_SERVER_PASS)}&quot;.getBytes());
vars.put(&quot;auth&quot;, new String(encodedUsernamePassword));</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${dfapi_auth}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response HTTP 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON response fields" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="560376587">&quot;resp&quot;:&quot;success&quot;,&quot;data&quot;</stringProp>
              <stringProp name="-152128748">&quot;applicationInfo&quot;:</stringProp>
              <stringProp name="-926222189">&quot;prohibitionNoticeNo&quot;:&quot;${__P(PROHIB_NUMBER)}&quot;</stringProp>
              <stringProp name="114729933">&quot;noticeTypeCd&quot;:&quot;${__P(PROHIB_TYPE)}&quot;</stringProp>
              <stringProp name="1200323163">&quot;reviewApplnTypeCd&quot;:&quot;ADP&quot;</stringProp>
              <stringProp name="281808565">&quot;noticeSubjectCd&quot;:&quot;PERS&quot;</stringProp>
              <stringProp name="1466922757">&quot;presentationTypeCd&quot;:&quot;${__changeCase(${HEARING_REQUEST_TYPE},UPPER)}&quot;</stringProp>
              <stringProp name="1748948538">&quot;reviewRoleTypeCd&quot;:&quot;APPNT&quot;</stringProp>
              <stringProp name="-13370635">&quot;firstGivenNm&quot;:&quot;${FIRST_NAME_APPLICANT}&quot;</stringProp>
              <stringProp name="1299878419">&quot;surnameNm&quot;:&quot;${LAST_NAME_APPLICANT}&quot;</stringProp>
              <stringProp name="1456052976">&quot;phoneNo&quot;:&quot;${APPLICANT_PHONE_NUMBER}&quot;</stringProp>
              <stringProp name="1466866418">&quot;email&quot;:&quot;${APPLICANT_EMAIL_ADDRESS}&quot;</stringProp>
              <stringProp name="-1898688065">&quot;manualEntryYN&quot;:&quot;N&quot;</stringProp>
              <stringProp name="-1489844984">&quot;formData&quot;:</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
